/**
 * Fichier : Subscription.jsx
 * Description : Composant React pour afficher une carte d'abonnement sp√©cifique avec son nom, prix, options, et un bouton de s√©lection. 
 * Effectue des requ√™tes API pour r√©cup√©rer le prix sur 4 semaines et v√©rifier si l'abonnement est actif pour l'utilisateur connect√©. 
 * Le bouton est d√©sactiv√© si l'abonnement est d√©j√† actif. Utilis√© dans SubscriptionPage.jsx pour afficher plusieurs formules.
 */

import React, { useEffect, useState, useContext } from "react"; // Importe React et les hooks n√©cessaires pour g√©rer l'√©tat, les effets secondaires, et le contexte
import styled from "styled-components"; // Importe styled-components pour cr√©er des composants stylis√©s avec CSS
import axios from "../services/axios.js"; // Importe l'instance Axios configur√©e pour effectuer des requ√™tes HTTP vers le backend
import { AuthContext } from "../contexts/AuthContext.jsx"; // Importe AuthContext pour acc√©der √† l'√©tat de l'utilisateur connect√©
import { Link, useNavigate, useLocation } from "react-router-dom"; 
const Container = styled.div`
  background-color: white;
  width: 100%;
  max-width: 350px;
  min-height: 400px;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: 15px;
  margin: 0 auto;

  @media (max-width: 480px) {
    padding: 15px;
    max-width: 100%;
  }
`;

const Title = styled.h1`
  color: #ae2119;
  font-size: 48px;
  text-decoration: underline;
`;

const PriceBox = styled.div`
  display: flex;
  justify-content: start;
  align-items: flex-end;
  gap: 5px;
`;

const Price = styled.h1`
  font-size: 32px;
  color: #000000;
`;

const Sub = styled.h2`
  font-size: 16px;
  font-weight: normal;
`;

const Monthly = styled.h2`
  margin-top: 10px;
  color: #000000;
`;

const Details = styled.p`
  font-size: 14px;
  color: #000000;
  margin: 20px 0;
`;

const Options = styled.div`
  display: flex;
  flex-direction: column;
  align-items: start;
  gap: 40px;
`;

const OptionItem = styled.div`
  display: flex;
  align-items: center;
  gap: 10px;

  img {
    width: 30px;
    height: 30px;
  }

  span {
    font-size: 14px;
  }
`;

const SelectButton = styled.button.withConfig({
  shouldForwardProp: (prop) => prop !== 'isButtonDisabled'
})`
  margin-top: 20px;
  padding: 10px 20px;
  background-color: ${({ isButtonDisabled }) => (isButtonDisabled ? '#ccc' : '#000')};
  color: ${({ isButtonDisabled }) => (isButtonDisabled ? '#888' : 'white')};
  border: none;
  border-radius: 6px;
  cursor: ${({ isButtonDisabled }) => (isButtonDisabled ? 'not-allowed' : 'pointer')};

  &:hover {
    background-color: ${({ isButtonDisabled }) => (isButtonDisabled ? '#ccc' : '#ae2119')};
  }
`;

/**
 * Composant : Subscription
 * Description : Affiche une carte d'abonnement avec son nom, prix (hebdomadaire et sur 4 semaines), liste d'options, et un bouton de s√©lection.
 * V√©rifie via API si l'abonnement est actif pour d√©sactiver le bouton. La fonction handleClick est un placeholder pour une future logique de s√©lection.
 * Props :
 * - name : Nom de l'abonnement (ex. : "ESSENTIAL")
 * - price : Prix hebdomadaire affich√© (non utilis√© directement, remplac√© par price4s/4)
 * - list : Tableau d'options √† afficher (chaque option a un nom et une image)
 * Retour : JSX repr√©sentant une carte d'abonnement
 */
const Subscription = ({ name, price, list }) => {
  // R√©cup√®re l'utilisateur connect√© depuis AuthContext pour v√©rifier son abonnement
  const { user } = useContext(AuthContext);
  const navigate = useNavigate();
  // √âtat pour stocker le prix sur 4 semaines r√©cup√©r√© depuis l'API, initialis√© √† null
  const [price4s, setPrice4s] = useState(null);

  // √âtat pour stocker l'ID de l'abonnement r√©cup√©r√© depuis l'API, initialis√© √† null
  const [id, setID] = useState(null);

  // √âtat pour d√©sactiver le bouton si l'abonnement est d√©j√† actif, initialis√© √† false
  const [isButtonDisabled, setIsButtonDisabled] = useState(false);

  /**
   * Effet : R√©cup√©ration des d√©tails de l'abonnement
   * Description : Effectue une requ√™te GET √† /type_abonnement pour r√©cup√©rer le prix sur 4 semaines et l'ID de l'abonnement correspondant au nom.
   * S'ex√©cute une seule fois au montage du composant.
   * D√©pendances : [] (ex√©cut√© une seule fois)
   */
  useEffect(() => {
    // Envoie une requ√™te GET √† l'endpoint /type_abonnement avec le param√®tre nom
    axios.get('/type_abonnement', {
      // Param√®tres de la requ√™te : filtre par nom de l'abonnement
      params: {
        nom: name
      }
    })
    // G√®re la r√©ponse r√©ussie
    .then(response => {
      console.log('üîç R√©sultat /type_abonnement :', response.data);
      setPrice4s(response.data[0].prix_4s_type_abonnement);
      setID(response.data[0].id_type_abonnement);
    })
    // G√®re les erreurs de la requ√™te
    .catch(error => {
      // Journalise l'erreur pour d√©bogage
      console.error(error);
    });
  }, []); // Tableau vide pour ex√©cution unique au montage

  /**
   * Effet : V√©rification de l'abonnement actif
   * Description : Si un utilisateur est connect√©, v√©rifie via une requ√™te GET √† /user/abonnement/check si l'abonnement actuel correspond √† cet abonnement.
   * D√©sactive le bouton si l'abonnement est actif.
   * D√©pendances : [user] (relance si l'utilisateur change)
   */
  useEffect(() => {
    if (user) {
      axios.get('/user/abonnement/check')
        .then(response => {
          console.log('Check Abonnement:', response.data.id_type_abonnement);
  
          if (response.data.id_type_abonnement == id) {
            setIsButtonDisabled(true);
          }
        })
        .catch(error => {
          console.error('Erreur lors de la v√©rification de l\'abonnement :', error);
        });
    }
  }, [user, id]); // D√©pendance : user, relance si l'utilisateur change

  /**
   * Fonction : handleClick
   * Description : Placeholder pour la logique de s√©lection de l'abonnement (non impl√©ment√©e).
   * Retour : Aucun
   */
  const handleClick = () => {
    if (user) {
      const subscribeToPlan = async () => {
        try {
          const startDate = new Date(); 
          const endDate = new Date();
          endDate.setMonth(endDate.getMonth() + 1); 

          
          const formattedStartDate = startDate.toISOString().split('T')[0]; 
          const formattedEndDate = endDate.toISOString().split('T')[0]; 

          axios.post('/user/abonnement/subscribe', {
            duree_abonnement: 1,
            datedebut_abonnement: formattedStartDate,
            datefin_abonnement: formattedEndDate,
            prix_abonnement: price4s,
            actif_abonnement: true,
            id_type_abonnement: id,
            type_paiement: 'carte',
          });
  
          // Une fois la r√©ponse re√ßue, on met √† jour l'√©tat du bouton
          setIsButtonDisabled(true);
          console.log('‚úÖ Souscription r√©ussie :', response.data);
  
          // Affichage d'une alerte de succ√®s
          alert('Souscription r√©ussie !');
        } catch (error) {
          // Gestion des erreurs
          console.error('‚ùå Erreur lors de la souscription :', error);
  
          if (error.response && error.response.status === 400) {
            console.error('R√©ponse du serveur:', error.response.data);
            alert(error.response.data.message);
          } else {
            alert("Erreur serveur lors de la souscription");
          }
        }
      };
  
      // On appelle la fonction d'abonnement
      subscribeToPlan();
    } else {
      // Redirige l'utilisateur vers la page de connexion si il n'est pas connect√©
      navigate("/login");
    }
  };
  
  // D√©but du rendu JSX
  return (
    // Conteneur principal de la carte d'abonnement
    <Container>
      {/* Titre de l'abonnement (ex. : ESSENTIAL) */}
      <Title>{name}</Title>
      
      {/* Conteneur pour afficher le prix hebdomadaire */}
      <PriceBox>
        {/* Prix hebdomadaire calcul√© en divisant le prix sur 4 semaines par 4 */}
        <Price>{price4s / 4}‚Ç¨</Price>
        {/* Texte indiquant que c'est un prix par semaine */}
        <Sub>/SEMAINE</Sub>
      </PriceBox>
      
      {/* Affichage du prix total sur 4 semaines */}
      <Monthly>Soit {price4s}‚Ç¨/4 SEMAINES</Monthly>
      
      {/* D√©tails contractuels de l'abonnement */}
      <Details>
        *Soit un pr√©l√®vement de {price4s}‚Ç¨ toutes les 4 semaines. Hors frais
        d‚Äôinscription de 50‚Ç¨ et hors 10‚Ç¨/an pour la garantie mat√©riel.
        Abonnement sans engagement annuel avec 8 semaines de pr√©avis.
        Abonnement donnant acc√®s aux activit√©s en libre-service.
      </Details>

      {/* Liste des options incluses dans l'abonnement */}
      <Options>
        {/* Mappe chaque option de la liste fournie */}
        {list.map((item, index) => (
          // Conteneur pour une option individuelle
          <OptionItem key={index}>
            {/* Image de l'option (ex. : ic√¥ne) */}
            <img src={item.img} alt={item.name} />
            {/* Nom de l'option (ex. : "Acc√®s r√©seau illimit√©") */}
            <span>{item.name}</span>
          </OptionItem>
        ))}
      </Options>

      {/* Bouton de s√©lection, d√©sactiv√© si l'abonnement est actif */}
      <SelectButton isButtonDisabled={isButtonDisabled} disabled={isButtonDisabled} onClick={handleClick}>
        {/* Affiche "ACTIF" si l'abonnement est actif, sinon "SELECTIONNER" */}
        {isButtonDisabled ? 'ACTIF' : 'SELECTIONNER'}
      </SelectButton>
    </Container>
  );
};

// Exporte le composant Subscription pour utilisation dans SubscriptionPage.jsx
export default Subscription;